<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/favicon.ico">
    <title>Doowon Portal - 외부교육관리</title>
    <link rel="stylesheet" type="text/css" href="css/style.css" />
    <link rel="stylesheet" type="text/css" href="css/darkmode.css" />
    <link rel="stylesheet" type="text/css" href="css/table.css" />
</head>

<body>
    <header class="header">
        <div class="logo"><a href="http://211.238.111.33:8080/cb/"><img src="images/doowon_logo.png" alt="Logo" /></a></div>
        <div class="title-container"><h1>Doowon Portal</h1><p>두원공조 포탈</p></div>
        <div class="menu-container">
            <span class="menu-item"><img src="images/user.svg" alt="User" /><%= username %></span>
            <a href="#" class="menu-item" onclick="handleLogout()"><img src="images/logout.svg" alt="Logout" />Logout</a>
        </div>                  
    </header>

    <nav class="main-nav">
        <div class="nav-container">
            <a href="/" class="nav-item <%= currentPath === '/' ? 'active' : '' %>">
                <img src="images/home.svg" alt="Home" />
                <span>대시보드</span>
            </a>
            <a href="/weekly-reports" class="nav-item <%= currentPath === '/weekly-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Weekly Reports" />
                <span>주간보고관리</span>
            </a>
            <a href="/travel-reports" class="nav-item <%= currentPath === '/travel-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Travel Reports" />
                <span>출장보고관리</span>
            </a>
            <a href="/hardware-management" class="nav-item <%= currentPath === '/hardware-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Hardware Management" />
                <span>하드웨어관리</span>
            </a>
            <a href="/equipment-management" class="nav-item <%= currentPath === '/equipment-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Equipment Management" />
                <span>장비관리</span>
            </a>
            <a href="/external-training" class="nav-item <%= currentPath === '/external-training' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="External Training" />
                <span>외부교육관리</span>
            </a>
        </div>
        <button class="mobile-menu-toggle" onclick="toggleMobileMenu()">☰</button>
        <div class="mobile-nav" id="mobileNav">
            <a href="/" class="nav-item <%= currentPath === '/' ? 'active' : '' %>">
                <img src="images/home.svg" alt="Home" />
                <span>대시보드</span>
            </a>
            <a href="/weekly-reports" class="nav-item <%= currentPath === '/weekly-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Weekly Reports" />
                <span>주간보고관리</span>
            </a>
            <a href="/travel-reports" class="nav-item <%= currentPath === '/travel-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Travel Reports" />
                <span>출장보고관리</span>
            </a>
            <a href="/hardware-management" class="nav-item <%= currentPath === '/hardware-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Hardware Management" />
                <span>하드웨어관리</span>
            </a>
            <a href="/equipment-management" class="nav-item <%= currentPath === '/equipment-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Equipment Management" />
                <span>장비관리</span>
            </a>
            <a href="/external-training" class="nav-item <%= currentPath === '/external-training' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="External Training" />
                <span>외부교육관리</span>
            </a>
        </div>
    </nav>

    <div class="main-container">
        <div class="page-header">
            <h2>🎓 외부교육관리</h2>
            <p>외부 교육 신청, 참석 및 수료를 관리할 수 있습니다.</p>
        </div>

        <div class="content-section">
            <div class="section-header">
                <h3>새 교육 신청</h3>
                <button class="btn-primary" onclick="showCreateForm()">+ 새 교육 신청</button>
            </div>

            <div class="create-form" id="createForm" style="display: none;">
                <div class="dynamic-form-container">
                    <div id="dynamicForm" class="loading">
                        <i>⏳</i>
                        <p>필드 구성을 불러오는 중...</p>
                    </div>
                    
                    <div id="validationErrors" class="validation-errors">
                        <h5>입력 오류:</h5>
                        <ul id="errorList"></ul>
                    </div>
                    
                    <!-- Attachment Field -->
                    <div class="field-group">
                        <h4>첨부파일</h4>
                        <div class="field-item">
                            <span class="field-label">첨부파일</span>
                            <div class="field-input-container">
                                <input type="file" id="trainingAttachments" name="attachments" multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif" class="field-input">
                                <small class="field-help">PDF, DOC, XLS, 이미지 파일을 업로드할 수 있습니다.</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn-secondary" onclick="hideCreateForm()">취소</button>
                        <button type="button" class="btn-primary" onclick="submitTrainingForm()">교육신청 저장</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="content-section">
            <div class="section-header">
                <h3>교육 신청 목록</h3>
                <div class="filter-controls">
                    <select id="statusFilter" onchange="filterTrainings()">
                        <option value="">전체 상태</option>
                        <option value="draft">임시저장</option>
                        <option value="submitted">신청됨</option>
                        <option value="approved">승인됨</option>
                        <option value="rejected">반려됨</option>
                        <option value="completed">수료</option>
                    </select>
                    <select id="typeFilter" onchange="filterTrainings()">
                        <option value="">전체 유형</option>
                        <option value="technical">기술교육</option>
                        <option value="safety">안전교육</option>
                        <option value="management">관리교육</option>
                        <option value="certification">자격증교육</option>
                        <option value="language">어학교육</option>
                        <option value="other">기타</option>
                    </select>
                    <input type="month" id="monthFilter" onchange="filterTrainings()" placeholder="월별 필터">
                </div>
            </div>

            <div class="reports-list" id="trainingsList">
                <div class="loading" id="loadingIndicator" style="display: none;">
                    <p>교육 신청 목록을 불러오는 중...</p>
                </div>
                <div class="empty-state" id="emptyState" style="display: none;">
                    <p>등록된 교육 신청이 없습니다.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Dynamic Forms Script -->
    <script src="/js/dynamic-forms.js"></script>
    
    <script>
        let formHandler = new DynamicFormHandler();

        function handleLogout() {
            fetch('/logout', { method: 'GET' })
                .then(() => window.location.href = '/login')
                .catch(error => console.error('Logout error:', error));
        }

        function toggleMobileMenu() {
            const mobileNav = document.getElementById('mobileNav');
            mobileNav.classList.toggle('active');
        }

        // Close mobile menu when clicking outside
        document.addEventListener('click', function(event) {
            const mobileNav = document.getElementById('mobileNav');
            const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
            
            if (mobileNav && mobileMenuToggle && 
                !mobileNav.contains(event.target) && 
                !mobileMenuToggle.contains(event.target)) {
                mobileNav.classList.remove('active');
            }
        });

        async function showCreateForm() {
            document.getElementById('createForm').style.display = 'block';
            await loadDynamicForm();
        }

        function hideCreateForm() {
            document.getElementById('createForm').style.display = 'none';
            formHandler.clearForm();
            hideValidationErrors();
        }

        // Load dynamic form
        async function loadDynamicForm() {
            try {
                await formHandler.renderForm('dynamicForm', 'external-training');
                console.log('Dynamic form loaded successfully');
            } catch (error) {
                console.error('Error loading dynamic form:', error);
                document.getElementById('dynamicForm').innerHTML = 
                    '<div class="empty-state"><i>❌</i><p>필드 구성을 불러올 수 없습니다.</p></div>';
            }
        }

        // Submit training form
        async function submitTrainingForm() {
            const validation = formHandler.validateForm();
            
            if (!validation.isValid) {
                showValidationErrors(validation.errors);
                return;
            }

            const formData = formHandler.getFormData();
            console.log('Submitting training form data:', formData);
            
            try {
                const response = await fetch('/api/external-training', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('교육신청이 저장되었습니다!');
                    hideCreateForm();
                    // Reload training list if exists
                } else {
                    alert('교육신청 저장에 실패했습니다: ' + data.error);
                }
            } catch (error) {
                console.error('Error submitting training form:', error);
                alert('교육신청 저장 중 오류가 발생했습니다.');
            }
        }

        // Show validation errors
        function showValidationErrors(errors) {
            const errorContainer = document.getElementById('validationErrors');
            const errorList = document.getElementById('errorList');
            
            errorList.innerHTML = '';
            errors.forEach(error => {
                const li = document.createElement('li');
                li.textContent = error;
                errorList.appendChild(li);
            });
            
            errorContainer.classList.add('show');
        }

        // Hide validation errors
        function hideValidationErrors() {
            document.getElementById('validationErrors').classList.remove('show');
        }

        // Edit item function for dynamic table
        function editItem(itemId) {
            // Implementation for editing training
            console.log('Editing training:', itemId);
        }

        // Delete item function for dynamic table
        function deleteItem(itemId) {
            // Implementation for deleting training
            console.log('Deleting training:', itemId);
        }

        // Load external training items
        async function loadExternalTrainingItems() {
            try {
                const response = await fetch('/api/external-training');
                const data = await response.json();
                
                if (data.success) {
                    const trainingsList = document.getElementById('trainingsList');
                    if (trainingsList) {
                        await formHandler.renderTable('trainingsList', data.items, 'external-training');
                    }
                } else {
                    console.error('Failed to load external training items:', data.error);
                }
            } catch (error) {
                console.error('Error loading external training items:', error);
            }
        }

        function filterTrainings() {
            const statusFilter = document.getElementById('statusFilter').value;
            const typeFilter = document.getElementById('typeFilter').value;
            const monthFilter = document.getElementById('monthFilter').value;
            
            console.log('Filtering trainings by status:', statusFilter, 'type:', typeFilter, 'month:', monthFilter);
        }

        function editTraining(id) {
            console.log('Editing training:', id);
            showCreateForm();
        }

        function submitTraining(id) {
            console.log('Submitting training:', id);
        }

        function deleteTraining(id) {
            if (confirm('정말로 이 교육신청을 삭제하시겠습니까?')) {
                console.log('Deleting training:', id);
            }
        }

        function viewTraining(id) {
            console.log('Viewing training:', id);
        }

        function downloadTraining(id) {
            console.log('Downloading training:', id);
        }

        function downloadCertificate(id) {
            console.log('Downloading certificate for training:', id);
        }


        // Check if we should show create form on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadExternalTrainingItems();
            
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('action') === 'create') {
                showCreateForm();
            }
        });
    </script>
</body>
</html>
