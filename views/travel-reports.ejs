<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/favicon.ico">
    <title>Doowon Portal - <%= sectionTitles['travel-reports'].name %></title>
    <link rel="stylesheet" type="text/css" href="css/style.css" />
    <link rel="stylesheet" type="text/css" href="css/darkmode.css" />
    <link rel="stylesheet" type="text/css" href="css/table.css" />
</head>

<body>
    <header class="header">
        <div class="logo"><a href="http://211.238.111.33:8080/cb/"><img src="images/doowon_logo.png" alt="Logo" /></a></div>
        <nav class="header-nav">
            <a href="/" class="nav-item <%= currentPath === '/' ? 'active' : '' %>">
                <img src="images/home.svg" alt="Home" />
                <span>대시보드</span>
            </a>
            <a href="/weekly-reports" class="nav-item <%= currentPath === '/weekly-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Weekly Reports" />
                <span><%= sectionTitles['weekly-reports'].name %></span>
            </a>
            <a href="/travel-reports" class="nav-item <%= currentPath === '/travel-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Travel Reports" />
                <span><%= sectionTitles['travel-reports'].name %></span>
            </a>
            <a href="/hardware-management" class="nav-item <%= currentPath === '/hardware-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Hardware Management" />
                <span><%= sectionTitles['hardware-management'].name %></span>
            </a>
            <a href="/equipment-management" class="nav-item <%= currentPath === '/equipment-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Equipment Management" />
                <span><%= sectionTitles['equipment-management'].name %></span>
            </a>
            <a href="/external-training" class="nav-item <%= currentPath === '/external-training' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="External Training" />
                <span><%= sectionTitles['external-training'].name %></span>
            </a>
            <a href="/admin" class="nav-item <%= currentPath === '/admin' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Admin" />
                <span>관리자 설정</span>
            </a>
        </nav>
        <button class="mobile-menu-toggle" onclick="toggleMobileMenu()">☰</button>
        <div class="mobile-nav" id="mobileNav">
            <a href="/" class="nav-item <%= currentPath === '/' ? 'active' : '' %>">
                <img src="images/home.svg" alt="Home" />
                <span>대시보드</span>
            </a>
            <a href="/weekly-reports" class="nav-item <%= currentPath === '/weekly-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Weekly Reports" />
                <span><%= sectionTitles['weekly-reports'].name %></span>
            </a>
            <a href="/travel-reports" class="nav-item <%= currentPath === '/travel-reports' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Travel Reports" />
                <span><%= sectionTitles['travel-reports'].name %></span>
            </a>
            <a href="/hardware-management" class="nav-item <%= currentPath === '/hardware-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Hardware Management" />
                <span><%= sectionTitles['hardware-management'].name %></span>
            </a>
            <a href="/equipment-management" class="nav-item <%= currentPath === '/equipment-management' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="Equipment Management" />
                <span><%= sectionTitles['equipment-management'].name %></span>
            </a>
            <a href="/external-training" class="nav-item <%= currentPath === '/external-training' ? 'active' : '' %>">
                <img src="images/settings.svg" alt="External Training" />
                <span><%= sectionTitles['external-training'].name %></span>
            </a>
        </div>
        <span class="menu-item"><img src="images/user.svg" alt="User" /><%= username %></span>
        <a href="#" class="menu-item" onclick="handleLogout()"><img src="images/logout.svg" alt="Logout" />Logout</a>
    </header>

    <div class="main-container">
        <div class="page-header">
            <h2><%= sectionTitles['travel-reports'].icon %> <%= sectionTitles['travel-reports'].name %></h2>
        </div>

        <div class="content-section">
            <div class="section-header">
                <h3>출장보고</h3>
                <button class="btn-primary" onclick="showCreateForm()">+ New</button>
            </div>

            <div class="create-form" id="createForm" style="display: none;">
                <div class="dynamic-form-container">
                    <div id="dynamicForm" class="loading">
                        <i>⏳</i>
                        <p>필드 구성을 불러오는 중...</p>
                    </div>
                    
                    <div id="validationErrors" class="validation-errors">
                        <h5>입력 오류:</h5>
                        <ul id="errorList"></ul>
                    </div>
                    
                    <!-- Attachment Field -->
                    <div class="field-group">
                        <h4>첨부 파일</h4>
                        <div class="field-item">
                            <span class="field-label">파일 업로드</span>
                            <div class="field-input-container">
                                <input type="file" id="travelAttachments" name="attachments" multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif" class="field-input">
                                <small class="field-help">PDF, DOC, XLS, 이미지 파일을 업로드할 수 있습니다.</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" class="btn-secondary" onclick="hideCreateForm()">취소</button>
                        <button type="button" class="btn-primary" onclick="submitTravelReportForm()">저장</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="content-section mobile-hide">
            <div class="section-header">
                <h3>출장보고 목록</h3>
                <div class="filter-controls">
                    <div class="search-filter-container">
                        <input type="text" id="searchFilter" class="search-filter-input" placeholder="🔍 아이템 ID 또는 이름으로 검색..." oninput="applySearch()">
                        <button class="clear-search-btn" onclick="clearSearch()" style="display: none;">✕</button>
                    </div>
                    <div id="fieldFilters" class="field-filters" style="display: none;">
                    </div>
                    <div class="existing-filters">
                        <button class="clear-filter-btn" onclick="clearAllFilters()">필터 초기화</button>
                    </div>
                </div>
            </div>

            <div class="reports-list" id="reportsList">
                <div class="loading" id="loadingIndicator" style="display: none;">
                    <p>출장보고 목록을 불러오는 중...</p>
                </div>
                <div class="empty-state" id="emptyState" style="display: none;">
                    <p>등록된 출장보고가 없습니다.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Dynamic Forms Script -->
    <script src="/js/dynamic-forms.js"></script>
    
    <script>
        let formHandler = new DynamicFormHandler();
        
        // Override the getTableContainerId method for travel reports
        formHandler.getTableContainerId = function() {
            return 'reportsList';
        };

        // Override pagination methods to use client-side pagination
        formHandler.changePage = function(direction) {
            const newPage = this.pagination.currentPage + direction;
            if (newPage >= 1 && newPage <= this.pagination.totalPages) {
                this.pagination.currentPage = newPage;
                this.refreshTable();
            }
        };

        formHandler.goToPage = function(page) {
            if (page >= 1 && page <= this.pagination.totalPages) {
                this.pagination.currentPage = page;
                this.refreshTable();
            }
        };

        formHandler.changeItemsPerPage = function(newItemsPerPage) {
            this.pagination.itemsPerPage = parseInt(newItemsPerPage);
            this.pagination.currentPage = 1;
            this.pagination.totalPages = Math.ceil(this.filteredItems.length / this.pagination.itemsPerPage);
            this.refreshTable();
        };

        function handleLogout() {
            fetch('/logout', { method: 'GET' })
                .then(() => window.location.href = '/login')
                .catch(error => console.error('Logout error:', error));
        }

        function toggleMobileMenu() {
            const mobileNav = document.getElementById('mobileNav');
            mobileNav.classList.toggle('active');
        }

        document.addEventListener('click', function(event) {
            const mobileNav = document.getElementById('mobileNav');
            const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
            
            if (mobileNav && mobileMenuToggle && 
                !mobileNav.contains(event.target) && 
                !mobileMenuToggle.contains(event.target)) {
                mobileNav.classList.remove('active');
            }
        });

        async function showCreateForm() {
            document.getElementById('createForm').style.display = 'block';
            await loadDynamicForm();
        }

        function hideCreateForm() {
            document.getElementById('createForm').style.display = 'none';
            formHandler.clearForm();
            hideValidationErrors();
        }

        async function loadDynamicForm() {
            try {
                await formHandler.renderForm('dynamicForm', 'travel-reports');
                console.log('Dynamic form loaded successfully');
            } catch (error) {
                console.error('Error loading dynamic form:', error);
                document.getElementById('dynamicForm').innerHTML = 
                    '<div class="empty-state"><i>❌</i><p>필드 구성을 불러올 수 없습니다.</p></div>';
            }
        }

        let isSubmitting = false;
        
        async function submitTravelReportForm() {
            if (isSubmitting) {
                console.log('⚠️ Already submitting, ignoring duplicate call');
                return;
            }
            
            const validation = formHandler.validateForm();
            
            if (!validation.isValid) {
                showValidationErrors(validation.errors);
                return;
            }

            const formData = formHandler.getFormData();
            console.log('Submitting travel report form data:', formData);
            
            isSubmitting = true;
            
            try {
                const trackerId = await getTrackerIdForSection('travel-reports');
                if (!trackerId) {
                    alert('출장보고 관리용 트래커가 설정되지 않았습니다. 관리자에게 문의하세요.');
                    isSubmitting = false;
                    return;
                }

                const codebeamerData = await transformFormDataForCodeBeamer(formData, 'travel-reports', trackerId);
                console.log('Transformed data for CodeBeamer:', codebeamerData);

                const response = await fetch(`/api/v3/trackers/${trackerId}/items`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(codebeamerData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    const itemId = data.item?.id;
                    
                    const fileInput = document.getElementById('travelAttachments');
                    if (fileInput && fileInput.files.length > 0 && itemId) {
                        console.log(`Uploading ${fileInput.files.length} attachments to item ${itemId}`);
                        
                        const attachmentFormData = new FormData();
                        for (let i = 0; i < fileInput.files.length; i++) {
                            attachmentFormData.append('attachments', fileInput.files[i]);
                        }
                        
                        try {
                            const attachResponse = await fetch(`/api/v3/items/${itemId}/attachments`, {
                                method: 'POST',
                                body: attachmentFormData
                            });
                            
                            const attachData = await attachResponse.json();
                            
                            if (attachData.success) {
                                alert(`출장보고가 저장되었습니다! (첨부 파일 ${attachData.attachments.length}개 업로드 완료)`);
                            } else {
                                alert(`출장보고는 저장되었으나 첨부 파일 업로드 실패: ${attachData.message}`);
                            }
                        } catch (attachError) {
                            console.error('Attachment upload error:', attachError);
                            alert('출장보고는 저장되었으나 첨부 파일 업로드 중 오류가 발생했습니다.');
                        }
                    } else {
                        alert('출장보고가 저장되었습니다!');
                    }
                    
                    hideCreateForm();
                } else {
                    alert('출장보고 저장에 실패했습니다: ' + data.error);
                }
            } catch (error) {
                console.error('Error submitting travel report form:', error);
                alert('출장보고 저장 중 오류가 발생했습니다.');
            } finally {
                isSubmitting = false;
            }
        }

        // Get tracker ID for a specific section
        async function getTrackerIdForSection(section) {
            try {
                const response = await fetch(`/api/tracker-id/${section}`);
                const data = await response.json();
                
                if (data.success && data.trackerId) {
                    return data.trackerId;
                }
                
                console.warn(`No tracker ID configured for section: ${section}`);
                return null;
            } catch (error) {
                console.error('Error getting tracker ID:', error);
                return null;
            }
        }

        function showValidationErrors(errors) {
            const errorContainer = document.getElementById('validationErrors');
            const errorList = document.getElementById('errorList');
            
            errorList.innerHTML = '';
            errors.forEach(error => {
                const li = document.createElement('li');
                li.textContent = error;
                errorList.appendChild(li);
            });
            
            errorContainer.classList.add('show');
        }

        function hideValidationErrors() {
            document.getElementById('validationErrors').classList.remove('show');
        }

        function editItem(itemId) {
            console.log('Editing travel report:', itemId);
        }

        function deleteItem(itemId) {
            console.log('Deleting travel report:', itemId);
        }

        async function loadTravelReports() {
            try {
                const response = await fetch('/api/travel-reports');
                const data = await response.json();
                
                if (data.success) {
                    const reportsList = document.getElementById('reportsList');
                    if (reportsList) {
                        await formHandler.renderTable('reportsList', data.items, 'travel-reports');
                    }
                } else {
                    console.error('Failed to load travel reports:', data.error);
                }
            } catch (error) {
                console.error('Error loading travel reports:', error);
            }
        }

        function filterReports() {
            const searchFilter = document.getElementById('searchFilter');
            if (searchFilter) {
                window.filterTable(searchFilter.value);
            }
        }

        function editReport(id) {
            console.log('Editing travel report:', id);
            showCreateForm();
        }

        function submitReport(id) {
            console.log('Submitting travel report:', id);
        }

        function deleteReport(id) {
            if (confirm('정말로 이 출장보고를 삭제하시겠습니까?')) {
                console.log('Deleting travel report:', id);
            }
        }

        function viewReport(id) {
            console.log('Viewing travel report:', id);
        }

        function downloadReport(id) {
            console.log('Downloading travel report:', id);
        }

        let allReports = [];
        let filteredReports = [];
        let searchQuery = '';
        let fieldConfigs = [];
        let currentFilters = {};

        async function loadReportsWithFilters() {
            try {
                showLoadingIndicator();
                
                const trackerId = await getTrackerIdForSection('travel-reports');
                if (!trackerId) {
                    console.log('No tracker ID configured for travel-reports');
                    hideLoadingIndicator();
                    return;
                }

                const response = await fetch(`/api/codebeamer/trackers/${trackerId}/items?includeFields=true`);
                if (!response.ok) {
                    throw new Error(`Failed to fetch items: ${response.status}`);
                }

                const items = await response.json();
                allReports = items;
                filteredReports = [...allReports];

                await loadFieldConfigsForSection('travel-reports');
                createFieldFilters();
                displayReports();
                hideLoadingIndicator();

                showStatus(`총 ${allReports.length}개의 출장보고를 로드했습니다`, true);
            } catch (error) {
                console.error('Error loading reports:', error);
                hideLoadingIndicator();
                showStatus('출장보고 목록을 불러오는데 실패했습니다', false);
            }
        }

        async function getTrackerIdForSection(section) {
            try {
                const response = await fetch(`/api/tracker-id/${section}`);
                const data = await response.json();
                return data.success ? data.trackerId : null;
            } catch (error) {
                console.error('Error getting tracker ID:', error);
                return null;
            }
        }

        async function loadFieldConfigsForSection(section) {
            try {
                const response = await fetch(`/api/field-configs/${section}`);
                if (!response.ok) {
                    fieldConfigs = [];
                    return;
                }
                const data = await response.json();
                if (data.success) {
                    fieldConfigs = data.fieldConfigs || [];
                } else {
                    fieldConfigs = [];
                }
            } catch (error) {
                console.error('Error loading field configs:', error);
                fieldConfigs = [];
            }
        }

        function createFieldFilters() {
            const fieldFiltersContainer = document.getElementById('fieldFilters');
            fieldFiltersContainer.innerHTML = '';

            if (!fieldConfigs || fieldConfigs.length === 0) {
                fieldFiltersContainer.style.display = 'none';
                return;
            }

            const filterableFields = fieldConfigs.filter(field => 
                field.type === 'selector' && field.options && field.options.length > 0
            );

            if (filterableFields.length === 0) {
                fieldFiltersContainer.style.display = 'none';
                return;
            }

            fieldFiltersContainer.innerHTML = '<span class="filter-label">필터:</span>';
            
            filterableFields.forEach(field => {
                const filterDiv = document.createElement('div');
                filterDiv.className = 'filter-item';
                
                const select = document.createElement('select');
                select.id = `filter-${field.referenceId}`;
                select.className = 'filter-select';
                select.onchange = () => applyAllFilters();
                
                const allOption = document.createElement('option');
                allOption.value = '';
                allOption.textContent = `전체 ${field.name}`;
                select.appendChild(allOption);
                
                field.options.forEach(option => {
                    const optionElement = document.createElement('option');
                    optionElement.value = option;
                    optionElement.textContent = option;
                    select.appendChild(optionElement);
                });
                
                filterDiv.appendChild(select);
                fieldFiltersContainer.appendChild(filterDiv);
            });

            fieldFiltersContainer.style.display = 'flex';
        }

        function applySearch() {
            const searchInput = document.getElementById('searchFilter');
            searchQuery = searchInput.value.toLowerCase().trim();
            
            const clearBtn = document.querySelector('.clear-search-btn');
            if (searchQuery) {
                clearBtn.style.display = 'block';
            } else {
                clearBtn.style.display = 'none';
            }
            
            applyAllFilters();
        }

        function clearSearch() {
            const searchInput = document.getElementById('searchFilter');
            searchInput.value = '';
            searchQuery = '';
            
            const clearBtn = document.querySelector('.clear-search-btn');
            clearBtn.style.display = 'none';
            
            applyAllFilters();
        }

        function applyAllFilters() {
            currentFilters = {};
            
            fieldConfigs.forEach(field => {
                const filterSelect = document.getElementById(`filter-${field.referenceId}`);
                if (filterSelect && filterSelect.value) {
                    currentFilters[field.referenceId] = filterSelect.value;
                }
            });

            filteredReports = allReports.filter(report => {
                if (searchQuery) {
                    const reportId = String(report.id).toLowerCase();
                    const reportName = String(report.name || '').toLowerCase();
                    
                    if (!reportId.includes(searchQuery) && !reportName.includes(searchQuery)) {
                        return false;
                    }
                }

                for (const [referenceId, filterValue] of Object.entries(currentFilters)) {
                    const field = fieldConfigs.find(f => f.referenceId == referenceId);
                    if (!field) continue;

                    const reportValue = getReportFieldValue(report, field);
                    if (reportValue !== filterValue) {
                        return false;
                    }
                }
                
                return true;
            });

            displayReports();
            
            const filterCount = Object.keys(currentFilters).length;
            let statusMsg = '';
            
            if (searchQuery && filterCount > 0) {
                statusMsg = `검색 및 필터 적용: ${filteredReports.length}개의 출장보고`;
            } else if (searchQuery) {
                statusMsg = `검색 결과: ${filteredReports.length}개의 출장보고`;
            } else if (filterCount > 0) {
                statusMsg = `필터 적용: ${filteredReports.length}개의 출장보고`;
            } else {
                statusMsg = `전체: ${filteredReports.length}개의 출장보고`;
            }
            
            showStatus(statusMsg, true);
        }

        function getReportFieldValue(report, field) {
            if (field.codebeamerId === 'name') return report.name;
            if (field.codebeamerId === 'status') return report.status?.name || report.status;
            
            if (report.customFields && Array.isArray(report.customFields)) {
                const customField = report.customFields.find(cf => 
                    cf.fieldId == field.referenceId || 
                    cf.id == field.referenceId ||
                    cf.referenceId == field.referenceId
                );
                
                if (customField) {
                    if (typeof customField.value === 'string') {
                        return customField.value;
                    }
                    if (customField.value && customField.value.name) {
                        return customField.value.name;
                    }
                    if (Array.isArray(customField.values) && customField.values.length > 0) {
                        return customField.values[0].name || customField.values[0];
                    }
                    if (customField.value && typeof customField.value === 'object') {
                        return JSON.stringify(customField.value);
                    }
                    return customField.value;
                }
            }
            
            const fieldKey = `custom_field_${field.referenceId}`;
            if (report[fieldKey]) {
                if (typeof report[fieldKey] === 'string') return report[fieldKey];
                if (report[fieldKey].name) return report[fieldKey].name;
                if (Array.isArray(report[fieldKey])) {
                    return report[fieldKey][0]?.name || report[fieldKey][0];
                }
            }
            
            return null;
        }

        function clearAllFilters() {
            const searchInput = document.getElementById('searchFilter');
            if (searchInput) {
                searchInput.value = '';
            }
            
            const clearBtn = document.querySelector('.clear-search-btn');
            if (clearBtn) {
                clearBtn.style.display = 'none';
            }
            
            searchQuery = '';
            
            fieldConfigs.forEach(field => {
                const filterSelect = document.getElementById(`filter-${field.referenceId}`);
                if (filterSelect) {
                    filterSelect.value = '';
                }
            });
            
            currentFilters = {};
            filteredReports = [...allReports];
            displayReports();
            
            showStatus(`검색 및 필터가 초기화되었습니다. ${allReports.length}개의 출장보고를 표시합니다`, true);
        }

        function displayReports() {
            const reportsList = document.getElementById('reportsList');
            if (!reportsList) return;

            if (filteredReports.length === 0) {
                reportsList.innerHTML = `
                    <div class="empty-state">
                        <p>검색 조건에 맞는 출장보고가 없습니다.</p>
                    </div>
                `;
                return;
            }

            formHandler.renderTable('reportsList', filteredReports, 'travel-reports');
        }

        function showLoadingIndicator() {
            const loadingIndicator = document.getElementById('loadingIndicator');
            if (loadingIndicator) {
                loadingIndicator.style.display = 'block';
            }
        }

        function hideLoadingIndicator() {
            const loadingIndicator = document.getElementById('loadingIndicator');
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
            }
        }

        function showStatus(message, isSuccess) {
            const statusElement = document.getElementById('status') || createStatusElement();
            statusElement.textContent = message;
            statusElement.style.display = 'block';
            statusElement.className = 'status ' + (isSuccess ? 'success' : 'error');

            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 5000);
        }

        function createStatusElement() {
            const statusElement = document.createElement('div');
            statusElement.id = 'status';
            statusElement.className = 'status';
            document.querySelector('.main-container').appendChild(statusElement);
            return statusElement;
        }

        function filterReports() {
            applyAllFilters();
        }

        document.addEventListener('DOMContentLoaded', function() {
            loadReportsWithFilters();
            
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('action') === 'create') {
                showCreateForm();
            }
        });
    </script>
</body>
</html>
