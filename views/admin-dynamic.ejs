<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="/images/favicon.ico">
    <title>Doowon Portal - Dynamic Admin Settings</title>
    <link rel="stylesheet" type="text/css" href="css/style.css" />
    <link rel="stylesheet" type="text/css" href="css/darkmode.css" />
    <link rel="stylesheet" type="text/css" href="css/table.css" />
</head>

<body>
    <div class="admin-header">
        <h1>⚙️ Admin Settings</h1>
        <p>Codebeamer 필드 매핑 관리 및 시스템 설정</p>
    </div>

    <nav class="admin-nav">
        <div class="admin-nav-container">
            <div class="admin-nav-title">Codebeamer 연동 설정</div>
            <div class="admin-nav-actions">
                <span class="admin-username">관리자: <%= username %></span>
                <a href="/" class="btn-admin btn-secondary">← 두원공조 포탈로 돌아가기</a>
                <a href="/admin/logout" class="btn-admin btn-secondary">로그아웃</a>
            </div>
        </div>
    </nav>

    <div class="admin-section">
        <div class="codebeamer-info">
            <h4>🔗 Codebeamer 연결 정보</h4>
            <div class="info-item">
                <span class="info-label">서버 URL : <%= serverUrl %></span>
            </div>
            <div class="info-item">
                <span class="info-label">연결 상태 : <span class="info-value" id="connectionStatus">확인 중...</span></span>
            </div>    
            <br>
        
            <h4>📋 프로젝트 설정</h4>
            <div class="field-item">
                <span class="field-label">프로젝트 선택</span>
                <select id="projectId" class="field-mapping-input" onchange="onProjectChange()">
                    <option value="">프로젝트를 선택하세요</option>
                </select>
                <button class="btn-admin btn-info" onclick="loadProjects()">프로젝트 목록 새로고침</button>
            </div>
            

            <h4>📊 필드 매핑 현황</h4>
            <div class="mapping-stats">
                <div class="stat-item">
                    <span class="status-indicator status-mapped"></span>
                    <span>총 관리 섹션 : <strong id="totalSections">0</strong>개</span>
                </div>
                <div class="stat-item">
                    <span class="status-indicator status-pending"></span>
                    <span>총 필드 : <strong id="totalFields">0</strong>개</span>
                </div>
                <div class="stat-item">
                    <span class="status-indicator status-unmapped"></span>
                    <span>활성 섹션:  <strong id="activeSections">0</strong>개</span>
                </div>
            </div>
       
        </div>

        <!-- 관리 섹션별 필드 설정 -->
        <div id="managementSections">
            <!-- 동적으로 생성될 섹션들 -->
        </div>

    </div>

    <script>
        let fieldConfigs = {
            'weekly-reports': [],
            'travel-reports': [],
            'hardware-management': [],
            'equipment-management': [],
            'external-training': []
        };

        let availableTrackers = [];
        let selectedTrackers = {
            'weekly-reports': '',
            'travel-reports': '',
            'hardware-management': '',
            'equipment-management': '',
            'external-training': ''
        };

        let sectionTitles = {
            'weekly-reports': { name: '주간보고관리', icon: '📊' },
            'travel-reports': { name: '출장보고관리', icon: '✈️' },
            'hardware-management': { name: 'HW/SW 버전관리', icon: '💻' },
            'equipment-management': { name: '장비관리', icon: '🔧' },
            'external-training': { name: '외부교육관리', icon: '🎓' }
        };

        // Field type configurations
        const fieldTypes = {
            string: {
                name: '문자열',
                icon: '📝',
                inputType: 'text',
                validation: 'text'
            },
            number: {
                name: '숫자',
                icon: '🔢',
                inputType: 'number',
                validation: 'number'
            },
            calendar: {
                name: '날짜',
                icon: '📅',
                inputType: 'date',
                validation: 'date'
            },
            textarea: {
                name: '텍스트 영역',
                icon: '📄',
                inputType: 'textarea',
                validation: 'text'
            },
            selector: {
                name: '선택',
                icon: '📋',
                inputType: 'select',
                validation: 'select'
            }
        };

        document.addEventListener('DOMContentLoaded', async function() {
            checkConnection();
            await loadSectionTitles();
            await loadFieldConfigs();
            renderManagementSections();
            updateStats();
            await loadProjects();
            await loadTrackerIds();
            
            const savedProjectId = localStorage.getItem('adminSelectedProjectId');
            if (savedProjectId) {
                const projectSelect = document.getElementById('projectId');
                projectSelect.value = savedProjectId;
                console.log('Restored saved project:', savedProjectId);
                
                await loadTrackers();
                
                setTimeout(() => {
                    const savedTrackers = JSON.parse(localStorage.getItem('adminSelectedTrackers') || '{}');
                    Object.keys(savedTrackers).forEach(section => {
                        const trackerSelect = document.getElementById(`tracker-${section}`);
                        if (trackerSelect && savedTrackers[section]) {
                            trackerSelect.value = savedTrackers[section];
                            selectedTrackers[section] = savedTrackers[section];
                            console.log(`Restored tracker for ${section}:`, savedTrackers[section]);
                        }
                    });
                    
                    const savedSection = localStorage.getItem('adminExpandedSection');
                    if (savedSection) {
                        const sectionElement = document.getElementById(`section-${savedSection}`);
                        if (sectionElement && sectionElement.classList.contains('collapsed')) {
                            toggleSection(savedSection);
                        }
                        console.log('Restored expanded section:', savedSection);
                    }
                }, 1000);
            }
        });

        // Load available projects from Codebeamer
        async function loadProjects() {
            try {
                const response = await fetch('/api/codebeamer/projects');
                const data = await response.json();
                
                const projectSelect = document.getElementById('projectId');
                projectSelect.innerHTML = '<option value="">프로젝트를 선택하세요</option>';
                
                if (data && Array.isArray(data)) {
                    data.forEach(project => {
                        const option = document.createElement('option');
                        option.value = project.id;
                        option.textContent = `${project.name} (ID: ${project.id})`;
                        if (project.description) {
                            option.textContent += ` - ${project.description}`;
                        }
                        projectSelect.appendChild(option);
                    });
                    console.log(`Loaded ${data.length} projects`);
                } else {
                    console.error('Invalid projects data:', data);
                    alert('프로젝트 목록을 불러오는데 실패했습니다.');
                }
            } catch (error) {
                console.error('Error loading projects:', error);
                alert('프로젝트 목록 불러오기 중 오류가 발생했습니다.');
            }
        }

        // Handle project selection change
        async function onProjectChange() {
            const projectId = document.getElementById('projectId').value;
            if (projectId) {
                console.log(`Selected project ID: ${projectId}`);
                localStorage.setItem('adminSelectedProjectId', projectId);
                availableTrackers = [];
                populateTrackerSelectors();
                
                await loadTrackers();
            }
        }

        // Load available trackers from Codebeamer
        async function loadTrackers() {
            const projectId = document.getElementById('projectId').value;
            if (!projectId) {
                alert('프로젝트를 선택해주세요.');
                return;
            }

            try {
                const response = await fetch(`/api/admin/available-trackers?projectId=${projectId}`);
                const data = await response.json();
                
                if (data.success) {
                    availableTrackers = data.trackers;
                    populateTrackerSelectors();
                    // Load saved tracker IDs after populating selectors
                    await loadTrackerIds();
                    alert(`트래커 ${data.trackers.length}개를 불러왔습니다.`);
                } else {
                    alert(`트래커 불러오기 실패: ${data.error}`);
                }
            } catch (error) {
                console.error('Error loading trackers:', error);
                alert('트래커 불러오기 중 오류가 발생했습니다.');
            }
        }

        // Populate tracker selectors for all sections
        function populateTrackerSelectors() {
            const sections = ['weekly-reports', 'travel-reports', 'hardware-management', 'equipment-management', 'external-training'];
            
            sections.forEach(section => {
                const selector = document.getElementById(`tracker-${section}`);
                if (selector) {
                    selector.innerHTML = '<option value="">트래커를 선택하세요</option>';
                    
                    availableTrackers.forEach(tracker => {
                        const option = document.createElement('option');
                        option.value = tracker.id;
                        option.textContent = `${tracker.name} (${tracker.id})`;
                        if (tracker.description) {
                            option.textContent += ` - ${tracker.description}`;
                        }
                        selector.appendChild(option);
                    });

                    // Restore previously selected tracker
                    if (selectedTrackers[section]) {
                        selector.value = selectedTrackers[section];
                        console.log(`Restored tracker for ${section}: ${selectedTrackers[section]}`);
                    }
                }
            });
        }

        function updateTrackerSelection(section, trackerId) {
            selectedTrackers[section] = trackerId;
            console.log(`Updated tracker for ${section}: ${trackerId}`);
            
            const savedTrackers = JSON.parse(localStorage.getItem('adminSelectedTrackers') || '{}');
            savedTrackers[section] = trackerId;
            localStorage.setItem('adminSelectedTrackers', JSON.stringify(savedTrackers));
            
            if (trackerId) {
                saveTrackerIdForSection(section, trackerId);
            }
        }

        // Save tracker ID for a section
        async function saveTrackerIdForSection(section, trackerId) {
            try {
                const response = await fetch(`/api/admin/tracker-id/${section}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ trackerId: trackerId })
                });

                const data = await response.json();
                
                if (data.success) {
                    console.log(`Tracker ID saved for ${section}: ${trackerId}`);
                    // Show success message
                    showNotification(`트래커 ID가 저장되었습니다: ${section} -> ${trackerId}`, 'success');
                } else {
                    console.error('Failed to save tracker ID:', data.error);
                    showNotification(`트래커 ID 저장 실패: ${data.error}`, 'error');
                }
            } catch (error) {
                console.error('Error saving tracker ID:', error);
                showNotification(`트래커 ID 저장 중 오류: ${error.message}`, 'error');
            }
        }

        // Load tracker IDs for all sections
        async function loadTrackerIds() {
            const sections = ['weekly-reports', 'travel-reports', 'hardware-management', 'equipment-management', 'external-training'];
            
            for (const section of sections) {
                try {
                    const response = await fetch(`/api/admin/tracker-id/${section}`);
                    const data = await response.json();
                    
                    if (data.success && data.trackerId) {
                        selectedTrackers[section] = data.trackerId;
                        const selector = document.getElementById(`tracker-${section}`);
                        if (selector) {
                            selector.value = data.trackerId;
                        }
                    }
                } catch (error) {
                    console.error(`Error loading tracker ID for ${section}:`, error);
                }
            }
        }

        // Show notification
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.textContent = message;
            
            // Style the notification
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 12px 20px;
                border-radius: 4px;
                color: white;
                font-weight: bold;
                z-index: 1000;
                max-width: 400px;
                word-wrap: break-word;
            `;
            
            // Set background color based on type
            if (type === 'success') {
                notification.style.backgroundColor = '#28a745';
            } else if (type === 'error') {
                notification.style.backgroundColor = '#dc3545';
            } else {
                notification.style.backgroundColor = '#17a2b8';
            }
            
            // Add to page
            document.body.appendChild(notification);
            
            // Remove after 3 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 3000);
        }

        async function refreshTrackers(section) {
            await loadTrackers();
        }

        async function loadSectionTitles() {
            try {
                const response = await fetch('/api/admin/section-titles');
                const data = await response.json();
                
                if (data.success && data.sectionTitles) {
                    sectionTitles = data.sectionTitles;
                    console.log('Loaded section titles:', sectionTitles);
                }
            } catch (error) {
                console.log('Using default section titles');
            }
        }

        async function saveSectionTitles() {
            try {
                const response = await fetch('/api/admin/section-titles', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ sectionTitles: sectionTitles })
                });

                const data = await response.json();
                return data.success;
            } catch (error) {
                console.error('Error saving section titles:', error);
                return false;
            }
        }

        async function editSectionTitle(sectionKey) {
            const titleElement = document.getElementById(`section-title-${sectionKey}`);
            const currentTitle = sectionTitles[sectionKey].name;
            
            const input = document.createElement('input');
            input.type = 'text';
            input.value = currentTitle;
            input.className = 'section-title-input';
            input.style.fontSize = '1.2em';
            input.style.fontWeight = '600';
            input.style.padding = '4px 8px';
            input.style.border = '2px solid #007bff';
            input.style.borderRadius = '4px';
            input.style.marginLeft = '8px';
            
            input.addEventListener('keydown', async function(e) {
                if (e.key === 'Enter') {
                    const newTitle = input.value.trim();
                    if (newTitle) {
                        sectionTitles[sectionKey].name = newTitle;
                        await saveSectionTitles();
                        renderManagementSections();
                        populateTrackerSelectors();
                        updateStats();
                        showNotification('섹션 제목이 저장되었습니다', 'success');
                    }
                } else if (e.key === 'Escape') {
                    renderManagementSections();
                    populateTrackerSelectors();
                }
            });
            
            input.addEventListener('blur', async function() {
                const newTitle = input.value.trim();
                if (newTitle && newTitle !== currentTitle) {
                    sectionTitles[sectionKey].name = newTitle;
                    await saveSectionTitles();
                    showNotification('섹션 제목이 저장되었습니다', 'success');
                }
                renderManagementSections();
                populateTrackerSelectors();
            });
            
            titleElement.innerHTML = '';
            titleElement.appendChild(input);
            input.focus();
            input.select();
        }

        let draggedElement = null;
        let draggedFieldId = null;
        let draggedSection = null;

        function handleFieldDragStart(e, section, fieldId) {
            draggedElement = e.target;
            draggedFieldId = fieldId;
            draggedSection = section;
            e.target.style.opacity = '0.4';
            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', e.target.innerHTML);
        }

        function handleFieldDragOver(e) {
            if (e.preventDefault) {
                e.preventDefault();
            }
            e.dataTransfer.dropEffect = 'move';
            return false;
        }

        function handleFieldDragEnter(e) {
            if (e.target.classList.contains('field-config-row')) {
                e.target.style.borderTop = '2px solid #007bff';
            }
        }

        function handleFieldDragLeave(e) {
            if (e.target.classList.contains('field-config-row')) {
                e.target.style.borderTop = '';
            }
        }

        async function handleFieldDrop(e, section, targetFieldId) {
            if (e.stopPropagation) {
                e.stopPropagation();
            }
            
            if (e.target.classList.contains('field-config-row')) {
                e.target.style.borderTop = '';
            }
            
            if (draggedSection !== section) {
                return false;
            }
            
            if (draggedFieldId !== targetFieldId) {
                const fields = fieldConfigs[section];
                const draggedIndex = fields.findIndex(f => f.id === draggedFieldId);
                const targetIndex = fields.findIndex(f => f.id === targetFieldId);
                
                if (draggedIndex !== -1 && targetIndex !== -1) {
                    const draggedField = fields.splice(draggedIndex, 1)[0];
                    fields.splice(targetIndex, 0, draggedField);
                    
                    await saveFieldConfigs();
                    renderManagementSections();
                    populateTrackerSelectors();
                    showNotification('필드 순서가 변경되었습니다', 'success');
                }
            }
            
            return false;
        }

        function handleFieldDragEnd(e) {
            e.target.style.opacity = '1';
            
            document.querySelectorAll('.field-config-row').forEach(row => {
                row.style.borderTop = '';
            });
            
            draggedElement = null;
            draggedFieldId = null;
            draggedSection = null;
        }

        // View current tracker configuration
        async function viewTrackerConfig(section) {
            const trackerId = selectedTrackers[section];
            if (!trackerId) {
                alert('해당 섹션의 트래커를 선택해주세요.');
                return;
            }

            try {
                const response = await fetch(`/api/admin/tracker-configuration/${trackerId}`);
                const data = await response.json();
                
                if (data.success) {
                    const config = data.configuration;
                    const configInfo = `
현재 트래커 설정:
- 트래커 ID: ${trackerId}
- 트래커명: ${config.basicInformation?.name || 'N/A'}
- 프로젝트 ID: ${config.basicInformation?.projectId || 'N/A'}
- 필드 수: ${config.fields?.length || 0}개
- 활성 워크플로우: ${config.basicInformation?.workflowIsActive ? 'Yes' : 'No'}
- 잠금 상태: ${config.basicInformation?.locked ? 'Yes' : 'No'}
- 숨김 상태: ${config.basicInformation?.hidden ? 'Yes' : 'No'}
                    `;
                    alert(configInfo);
                } else {
                    alert(`트래커 설정 불러오기 실패: ${data.error}`);
                }
            } catch (error) {
                console.error('Error viewing tracker config:', error);
                alert('트래커 설정 보기 중 오류가 발생했습니다.');
            }
        }

        async function checkConnection() {
            try {
                const response = await fetch('/api/debug/ping');
                const data = await response.json();
                const statusElement = document.getElementById('connectionStatus');
                
                if (data.success) {
                    statusElement.textContent = '양호';
                    statusElement.style.color = '#28a745';
                } else {
                    statusElement.textContent = '실패';
                    statusElement.style.color = '#dc3545';
                }
            } catch (error) {
                document.getElementById('connectionStatus').textContent = '연결 실패';
                document.getElementById('connectionStatus').style.color = '#dc3545';
            }
        }

        async function removeField(section, fieldId) {
            if (confirm('이 필드를 삭제하시겠습니까?')) {
                fieldConfigs[section] = fieldConfigs[section].filter(field => field.id !== fieldId);
                const saved = await saveFieldConfigs();
                
                if (saved) {
                    renderManagementSections();
                    populateTrackerSelectors();
                    updateStats();
                } else {
                    alert('필드 삭제에 실패했습니다.');
                }
            }
        }

        function toggleSection(section) {
            const sectionElement = document.getElementById(`section-${section}`);
            const toggleIcon = sectionElement.querySelector('.toggle-icon');
            
            sectionElement.classList.toggle('collapsed');
            
            if (sectionElement.classList.contains('collapsed')) {
                toggleIcon.textContent = '▶';
                if (localStorage.getItem('adminExpandedSection') === section) {
                    localStorage.removeItem('adminExpandedSection');
                }
            } else {
                toggleIcon.textContent = '▼';
                localStorage.setItem('adminExpandedSection', section);
            }
        }

        function renderManagementSections() {
            const container = document.getElementById('managementSections');
            container.innerHTML = '';
            
            const sectionKeys = ['weekly-reports', 'travel-reports', 'hardware-management', 'equipment-management', 'external-training'];
            
            sectionKeys.forEach(sectionKey => {
                const section = sectionTitles[sectionKey];
                const allFields = fieldConfigs[sectionKey];
                const fields = allFields.filter(field => !field.readonly);
                const sectionHtml = `
                    <div class="management-section" id="section-${sectionKey}">
                        <div class="management-section-header">
                        <div class="section-toggle">
                            <button class="toggle-btn" onclick="toggleSection('${sectionKey}')">
                                <span class="toggle-icon">▼</span>
                            </button>
                            <h3 id="section-title-${sectionKey}" style="cursor: pointer; display: inline-flex; align-items: center;" onclick="editSectionTitle('${sectionKey}')" title="클릭하여 제목 수정">
                                ${section.icon} ${section.name} <span style="margin-left: 8px; font-size: 0.8em; color: #666;">✏️</span>
                            </h3>
                            <span class="field-count">(${fields.length}개 필드)</span>
                        </div>
                            <div class="admin-button-container">
                                <button class="btn-add-field" onclick="showAddFieldForm('${sectionKey}')" title="필드 추가">
                                    <img src="/images/plus-sign.png" alt="필드 추가" style="width: 40px; height: 40px;">
                                </button>
                                <button class="btn-admin btn-primary" onclick="saveSectionMapping('${sectionKey}')">매핑 저장</button>
                                <button class="btn-admin btn-warning" onclick="testSectionMapping('${sectionKey}')">매핑 테스트</button>
                                <button class="btn-admin btn-info" onclick="viewTrackerConfig('${sectionKey}')">현재 설정 보기</button>
                            </div>
                        </div>
                        <div class="tracker-selection">
                            <div class="field-item">
                                <span class="field-label">연결된 트래커</span>
                                <select id="tracker-${sectionKey}" class="field-mapping-input" onchange="updateTrackerSelection('${sectionKey}', this.value)">
                                    <option value="">트래커를 선택하세요 (프로젝트 선택 시 자동 로드)</option>
                                </select>
                            </div>
                        
                        </div>
                        <div class="management-section-content">
                            <div class="field-list">
                                ${fields.length === 0 ? 
                                    '<div class="empty-state"><i>📝</i><p>등록된 필드가 없습니다.<br>상단의 "필드 추가" 버튼을 클릭하여 새 필드를 추가하세요.</p></div>' :
                                    fields.map(field => `
                                        <div class="field-config-row" 
                                             id="field-${field.id}" 
                                             draggable="true"
                                             ondragstart="handleFieldDragStart(event, '${sectionKey}', ${field.id})"
                                             ondragover="handleFieldDragOver(event)"
                                             ondragenter="handleFieldDragEnter(event)"
                                             ondragleave="handleFieldDragLeave(event)"
                                             ondrop="handleFieldDrop(event, '${sectionKey}', ${field.id})"
                                             ondragend="handleFieldDragEnd(event)"
                                             style="cursor: move;">
                                            <div class="drag-handle" title="드래그하여 순서 변경" style="margin-right: 12px; color: #999; font-size: 1.2em;">⋮⋮</div>
                                            <div class="field-properties">
                                                <div class="field-prop">
                                                    <label>필드명</label>
                                                    <input type="text" value="${field.name}" onchange="updateFieldProperty('${sectionKey}', ${field.id}, 'name', this.value)">
                                                </div>
                                                <div class="field-prop">
                                                    <label>타입</label>
                                                    <select onchange="updateFieldProperty('${sectionKey}', ${field.id}, 'type', this.value)">
                                                        <option value="string" ${field.type === 'string' ? 'selected' : ''}>📝 문자열</option>
                                                        <option value="number" ${field.type === 'number' ? 'selected' : ''}>🔢 숫자</option>
                                                        <option value="calendar" ${field.type === 'calendar' ? 'selected' : ''}>📅 날짜</option>
                                                        <option value="textarea" ${field.type === 'textarea' ? 'selected' : ''}>📄 텍스트 영역</option>
                                                        <option value="selector" ${field.type === 'selector' ? 'selected' : ''}>📋 선택</option>
                                                    </select>
                                                </div>
                                                <div class="field-prop" style="display: ${field.type === 'selector' ? 'flex' : 'none'};" id="options-${field.id}">
                                                    <label>선택 옵션</label>
                                                    <input type="text" value="${field.options ? field.options.join(', ') : ''}" onchange="updateFieldProperty('${sectionKey}', ${field.id}, 'options', this.value)" placeholder="옵션1,옵션2,옵션3">
                                                </div>
                                                <div class="field-prop required-field-prop">
                                                    <label>필수 여부</label>
                                                    <select onchange="updateFieldProperty('${sectionKey}', ${field.id}, 'required', this.value === 'required')">
                                                        <option value="optional" ${!field.required ? 'selected' : ''}>필수 아님</option>
                                                        <option value="required" ${field.required ? 'selected' : ''}>필수</option>
                                                    </select>
                                                </div>
                                            </div>
                                            <div class="field-actions">
                                                <button class="btn-delete-icon" onclick="removeField('${sectionKey}', ${field.id})" title="삭제">
                                                    <img src="/images/trash.png" alt="삭제" style="width: 20px; height: 20px;">
                                                </button>
                                            </div>
                                        </div>
                                    `).join('')
                                }
                            </div>        
                            </div>
                        </div>
                    </div>
                `;
                container.innerHTML += sectionHtml;
            });
        }

        // Update statistics
        function updateStats() {
            const totalSections = Object.keys(fieldConfigs).length;
            const totalFields = Object.values(fieldConfigs).reduce((sum, fields) => {
                const editableFields = fields.filter(field => !field.readonly);
                return sum + editableFields.length;
            }, 0);
            const activeSections = Object.values(fieldConfigs).filter(fields => {
                const editableFields = fields.filter(field => !field.readonly);
                return editableFields.length > 0;
            }).length;
            
            document.getElementById('totalSections').textContent = totalSections;
            document.getElementById('totalFields').textContent = totalFields;
            document.getElementById('activeSections').textContent = activeSections;
        }

        async function loadFieldConfigs() {
            try {
                const response = await fetch('/api/admin/field-configs');
                const data = await response.json();
                
                if (data.success) {
                    fieldConfigs = data.fieldConfigs;
                    cleanupFieldConfigs();
                    return true;
                } else {
                    console.error('Failed to load field configs:', data.error);
                    return false;
                }
            } catch (error) {
                console.error('Error loading field configs:', error);
                return false;
            }
        }
        
        function cleanupFieldConfigs() {
            let cleaned = false;
            
            if (!fieldConfigs || typeof fieldConfigs !== 'object') {
                console.error('❌ Invalid fieldConfigs structure');
                return;
            }
            
            Object.keys(fieldConfigs).forEach(section => {
                if (!Array.isArray(fieldConfigs[section])) {
                    console.error(`❌ Invalid section: ${section}`);
                    return;
                }
                
                fieldConfigs[section].forEach((field, index) => {
                    if (!field) return;
                    if (!field.referenceId) {
                        const maxReferenceId = Math.max(10000, ...fieldConfigs[section].filter(f => f && f.referenceId).map(f => f.referenceId));
                        field.referenceId = maxReferenceId + index + 1;
                        console.warn(`⚠️ Auto-assigned referenceId ${field.referenceId} to field: ${field.name} (${section})`);
                        cleaned = true;
                    }
                });
                
                let hasTimestampIds = fieldConfigs[section].some(f => f && f.id > 1000000000);
                if (hasTimestampIds) {
                    console.warn(`⚠️ Normalizing timestamp IDs in ${section}`);
                    fieldConfigs[section].forEach((field, index) => {
                        if (!field) return;
                        const oldId = field.id;
                        field.id = index + 1;
                        if (field.codebeamerId && field.codebeamerId.startsWith('field_')) {
                            field.codebeamerId = `custom_field_${field.id}`;
                        }
                        console.log(`  → Normalized field "${field.name}": ${oldId} → ${field.id}`);
                    });
                    cleaned = true;
                }
                
                fieldConfigs[section].forEach(field => {
                    if (!field) return;
                    if (field.type !== 'selector' && field.options) {
                        console.warn(`⚠️ Removing options from non-selector field: ${field.name} (${section})`);
                        delete field.options;
                        cleaned = true;
                    }
                    if (field.type === 'selector' && !field.options) {
                        console.log(`✓ Adding empty options to selector field: ${field.name} (${section})`);
                        field.options = [];
                        cleaned = true;
                    }
                    if (field.options && Array.isArray(field.options)) {
                        const originalLength = field.options.length;
                        field.options = field.options.filter(opt => opt && opt.trim() !== '');
                        if (field.options.length === 0 && field.type !== 'selector') {
                            console.warn(`⚠️ Removing empty options array from ${field.name} (${section})`);
                            delete field.options;
                            cleaned = true;
                        } else if (originalLength !== field.options.length) {
                            cleaned = true;
                        }
                    }
                });
            });
            
            if (cleaned) {
                console.log('🧹 Cleaned up field configurations - saving...');
                saveFieldConfigs();
            }
        }

        // Save field configurations
        async function saveFieldConfigs() {
            try {
                console.log('💾 Saving field configs to server...');
                console.log('  - Sections:', Object.keys(fieldConfigs));
                console.log('  - Tracker IDs:', selectedTrackers);
                
                const saveData = {
                    fieldConfigs: fieldConfigs,
                    trackerIds: selectedTrackers
                };
                
                const response = await fetch('/api/admin/field-configs', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(saveData)
                });
                
                const data = await response.json();
                
                if (data.success) {
                    console.log('✓ Field configs saved successfully');
                    return true;
                } else {
                    console.error('✗ Failed to save field configs:', data.error);
                    alert('설정 저장 실패: ' + data.error);
                    return false;
                }
            } catch (error) {
                console.error('✗ Error saving field configs:', error);
                alert('설정 저장 중 오류 발생: ' + error.message);
                return false;
            }
        }

        // Save section mapping
        async function saveSectionMapping(section) {
            console.log(`Saving mapping for ${section}:`, fieldConfigs[section]);
            const saved = await saveFieldConfigs();
            
            if (saved) {
                const updateCodebeamer = confirm('Codebeamer에 설정을 동기화하시겠습니까?');
                if (updateCodebeamer) {
                    await updateCodebeamerConfiguration(section);
                } else {
                alert(`${section} 필드 매핑이 저장되었습니다.`);
                }
            } else {
                alert('필드 매핑 저장에 실패했습니다.');
            }
        }

        // Update Codebeamer configuration
        async function updateCodebeamerConfiguration(section) {
            try {
                let trackerId = selectedTrackers[section];
                const projectId = document.getElementById('projectId').value;

                if (!projectId) {
                    alert('프로젝트를 선택해주세요.');
                    return;
                }

                if (!trackerId) {
                    alert('해당 섹션의 트래커를 선택해주세요.\n상단의 "트래커 관리"에서 새 트래커를 생성할 수 있습니다.');
                    return;
                }

                const response = await fetch('/api/admin/update-codebeamer-config', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        section: section,
                        fieldConfigs: fieldConfigs[section],
                        trackerId: trackerId,
                        projectId: projectId
                    })
                });

                const data = await response.json();

                if (data.success) {
                    alert(`${section} Codebeamer 설정이 성공적으로 업데이트되었습니다!\n트래커: ${data.trackerId}\n필드 수: ${data.fieldCount}`);
                } else {
                    alert(`Codebeamer 설정 업데이트 실패: ${data.error}`);
                }
            } catch (error) {
                console.error('Error updating Codebeamer configuration:', error);
                alert('Codebeamer 설정 업데이트 중 오류가 발생했습니다.');
            }
        }

        // Test section mapping
        async function testSectionMapping(section) {
            console.log(`Testing mapping for ${section}:`, fieldConfigs[section]);
            
            let trackerId = selectedTrackers[section];
            const projectId = document.getElementById('projectId').value;
            
            if (!projectId) {
                alert('프로젝트를 선택해주세요.');
                return;
            }

            if (!trackerId) {
                alert('해당 섹션의 트래커를 선택해주세요.\n상단의 "트래커 관리"에서 새 트래커를 생성할 수 있습니다.');
                return;
            }
            
            try {
                const response = await fetch('/api/admin/test-field-mapping', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        section: section,
                        fieldConfigs: fieldConfigs[section],
                        trackerId: trackerId
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(`${section} 필드 매핑 테스트가 성공했습니다.\n트래커: ${data.trackerName}\n필드 수: ${data.fieldCount}`);
                } else {
                    alert(`필드 매핑 테스트 실패: ${data.error}`);
                }
            } catch (error) {
                console.error('Error testing field mapping:', error);
                alert('필드 매핑 테스트 중 오류가 발생했습니다.');
            }
        }

        // Show add field form for specific section
        function showAddFieldForm(section) {
            const modal = document.createElement('div');
            modal.className = 'modal-overlay';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>새 필드 추가 - ${getSectionName(section)}</h3>
                        <button class="modal-close" onclick="closeModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="field-type-selector">
                            <button class="field-type-btn active" data-type="string">📝 문자열</button>
                            <button class="field-type-btn" data-type="number">🔢 숫자</button>
                            <button class="field-type-btn" data-type="calendar">📅 날짜</button>
                            <button class="field-type-btn" data-type="textarea">📄 텍스트 영역</button>
                            <button class="field-type-btn" data-type="selector">📋 선택</button>
                        </div>
                        
                        <div class="field-config-form">
                            <div class="field-config-row">
                                <span class="field-label">필드명</span>
                                <input type="text" id="newFieldName" placeholder="필드명을 입력하세요">
                            </div>
                            
                            <div class="field-config-row" id="newSelectorOptionsRow" style="display: none;">
                                <span class="field-label">선택 옵션</span>
                                <input type="text" id="newFieldOptions" placeholder="옵션1,옵션2,옵션3 (쉼표로 구분)">
                            </div>
                            
                            <div class="field-config-row">
                                <span class="field-label">필수 여부</span>
                                <select id="newFieldRequired">
                                    <option value="optional">필수 아님</option>
                                    <option value="required">필수</option>
                                </select>
                            </div>
                            
                            
                            
                            <div class="field-preview">
                                <h5>미리보기</h5>
                                <div id="newFieldPreview"></div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn-admin btn-primary" onclick="addFieldToSection('${section}')">추가</button>
                        <button class="btn-admin btn-secondary" onclick="closeModal()">취소</button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            initializeModalFieldTypeSelector();
            previewNewField();
        }

        // Get section name by key
        function getSectionName(sectionKey) {
            const names = {
                'weekly-reports': '주간보고관리',
                'travel-reports': '출장보고관리',
                'hardware-management': 'HW/SW 버전관리',
                'equipment-management': '장비관리',
                'external-training': '외부교육관리'
            };
            return names[sectionKey] || sectionKey;
        }

        // Close modal
        function closeModal() {
            const modal = document.querySelector('.modal-overlay');
            if (modal) {
                modal.remove();
            }
        }

        // Initialize modal field type selector
        function initializeModalFieldTypeSelector() {
            const typeButtons = document.querySelectorAll('.modal-overlay .field-type-btn');
            typeButtons.forEach(btn => {
                btn.addEventListener('click', function() {
                    typeButtons.forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    updateModalFieldConfigForm(this.dataset.type);
                });
            });
        }

        // Update modal field configuration form
        function updateModalFieldConfigForm(type) {
            const selectorOptionsRow = document.getElementById('newSelectorOptionsRow');
            if (type === 'selector') {
                selectorOptionsRow.style.display = 'flex';
            } else {
                selectorOptionsRow.style.display = 'none';
            }
            previewNewField();
        }

        // Preview new field
        function previewNewField() {
            const type = document.querySelector('.modal-overlay .field-type-btn.active').dataset.type;
            const name = document.getElementById('newFieldName').value || '샘플 필드';
            const required = document.getElementById('newFieldRequired').value === 'required';
            const options = document.getElementById('newFieldOptions').value;
            
            const preview = document.getElementById('newFieldPreview');
            let html = `<label>${name}${required ? ' *' : ''}</label>`;
            
            if (type === 'selector' && options) {
                const optionList = options.split(',').map(opt => opt.trim());
                html += `<select>`;
                html += '<option value="">선택하세요</option>';
                optionList.forEach(option => {
                    html += `<option value="${option}">${option}</option>`;
                });
                html += '</select>';
            } else if (type === 'textarea') {
                html += `<textarea placeholder="${fieldTypes[type].name} 입력" rows="4"></textarea>`;
            } else {
                const inputType = fieldTypes[type].inputType;
                html += `<input type="${inputType}" placeholder="${fieldTypes[type].name} 입력">`;
            }
            
            preview.innerHTML = html;
        }

        // Add field to specific section
        async function addFieldToSection(section) {
            const name = document.getElementById('newFieldName').value;
            const type = document.querySelector('.modal-overlay .field-type-btn.active').dataset.type;
            const required = document.getElementById('newFieldRequired').value === 'required';
            const options = document.getElementById('newFieldOptions').value;
            
            if (!name) {
                alert('필드명은 필수입니다.');
                return;
            }
            
            if (type === 'selector' && !options) {
                alert('선택 필드의 경우 옵션을 입력해주세요.');
                return;
            }
            
            const maxId = Math.max(0, ...fieldConfigs[section].map(f => f.id));
            const newId = maxId + 1;
            
            const maxReferenceId = Math.max(10000, ...fieldConfigs[section].filter(f => f.referenceId).map(f => f.referenceId));
            const newReferenceId = maxReferenceId + 1;
            
            const fieldConfig = {
                id: newId,
                name: name,
                codebeamerId: `custom_field_${newId}`,
                type: type,
                required: required,
                readonly: false,
                referenceId: newReferenceId
            };
            
            if (type === 'selector') {
                fieldConfig.options = options ? options.split(',').map(opt => opt.trim()).filter(opt => opt !== '') : [];
            }
            
            console.log(`✓ Created field with ID ${newId}, referenceId ${newReferenceId} for ${section}`);
            
            fieldConfigs[section].push(fieldConfig);
            const saved = await saveFieldConfigs();
            
            if (saved) {
                renderManagementSections();
                populateTrackerSelectors();
                updateStats();
                closeModal();
                alert('필드가 추가되었습니다.');
            } else {
                alert('필드 저장에 실패했습니다.');
            }
        }

        // Update field property
        async function updateFieldProperty(section, fieldId, property, value) {
            const field = fieldConfigs[section].find(f => f.id === fieldId);
            if (field) {
                if (property === 'options') {
                    field[property] = value ? value.split(',').map(opt => opt.trim()).filter(opt => opt !== '') : [];
                } else {
                    field[property] = value;
                }
                
                if (property === 'type') {
                    const optionsField = document.getElementById(`options-${fieldId}`);
                    if (optionsField) {
                        optionsField.style.display = value === 'selector' ? 'flex' : 'none';
                    }
                    
                    if (value === 'selector' && !field.options) {
                        field.options = [];
                    } else if (value !== 'selector' && field.options) {
                        delete field.options;
                        console.log(`Cleaned up options from field ${field.name} (changed to ${value})`);
                    }
                }
                
                const saved = await saveFieldConfigs();
                if (!saved) {
                    alert('필드 업데이트에 실패했습니다.');
                }
            }
        }

        // Save all mappings at once
        async function saveAllMappings() {
            try {
                const saved = await saveFieldConfigs();
                
                if (saved) {
                    const updateCodebeamer = confirm('모든 설정을 Codebeamer에 동기화하시겠습니까?');
                    if (updateCodebeamer) {
                        await updateAllCodebeamerConfigurations();
                    } else {
                    alert('모든 필드 매핑이 저장되었습니다!');
                    }
                    console.log('All field configs saved:', fieldConfigs);
                } else {
                    alert('필드 매핑 저장에 실패했습니다.');
                }
            } catch (error) {
                console.error('Error saving all mappings:', error);
                alert('저장 중 오류가 발생했습니다.');
            }
        }

        // Update all Codebeamer configurations
        async function updateAllCodebeamerConfigurations() {
            const sections = Object.keys(fieldConfigs);
            let successCount = 0;
            let errorCount = 0;
            const errors = [];

            for (const section of sections) {
                if (fieldConfigs[section].length > 0) {
                    try {
                        await updateCodebeamerConfiguration(section);
                        successCount++;
                    } catch (error) {
                        errorCount++;
                        errors.push(`${section}: ${error.message}`);
                    }
                }
            }

            if (errorCount === 0) {
                alert(`모든 Codebeamer 설정이 성공적으로 업데이트되었습니다!\n성공: ${successCount}개 섹션`);
            } else {
                alert(`Codebeamer 설정 업데이트 완료\n성공: ${successCount}개, 실패: ${errorCount}개\n\n실패한 섹션:\n${errors.join('\n')}`);
            }
        }

    </script>
</body>
</html>
